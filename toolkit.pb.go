// Code generated by protoc-gen-go. DO NOT EDIT.
// source: toolkit.proto

package protobuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NamedRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NamedRequest) Reset()         { *m = NamedRequest{} }
func (m *NamedRequest) String() string { return proto.CompactTextString(m) }
func (*NamedRequest) ProtoMessage()    {}
func (*NamedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{0}
}

func (m *NamedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NamedRequest.Unmarshal(m, b)
}
func (m *NamedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NamedRequest.Marshal(b, m, deterministic)
}
func (m *NamedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NamedRequest.Merge(m, src)
}
func (m *NamedRequest) XXX_Size() int {
	return xxx_messageInfo_NamedRequest.Size(m)
}
func (m *NamedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NamedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NamedRequest proto.InternalMessageInfo

func (m *NamedRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetDeviceBoolRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Enabled              bool     `protobuf:"varint,10,opt,name=enabled,proto3" json:"enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDeviceBoolRequest) Reset()         { *m = SetDeviceBoolRequest{} }
func (m *SetDeviceBoolRequest) String() string { return proto.CompactTextString(m) }
func (*SetDeviceBoolRequest) ProtoMessage()    {}
func (*SetDeviceBoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{1}
}

func (m *SetDeviceBoolRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDeviceBoolRequest.Unmarshal(m, b)
}
func (m *SetDeviceBoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDeviceBoolRequest.Marshal(b, m, deterministic)
}
func (m *SetDeviceBoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDeviceBoolRequest.Merge(m, src)
}
func (m *SetDeviceBoolRequest) XXX_Size() int {
	return xxx_messageInfo_SetDeviceBoolRequest.Size(m)
}
func (m *SetDeviceBoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDeviceBoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDeviceBoolRequest proto.InternalMessageInfo

func (m *SetDeviceBoolRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SetDeviceBoolRequest) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type SetMTURequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Mtu                  int32    `protobuf:"varint,10,opt,name=mtu,proto3" json:"mtu,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetMTURequest) Reset()         { *m = SetMTURequest{} }
func (m *SetMTURequest) String() string { return proto.CompactTextString(m) }
func (*SetMTURequest) ProtoMessage()    {}
func (*SetMTURequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{2}
}

func (m *SetMTURequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetMTURequest.Unmarshal(m, b)
}
func (m *SetMTURequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetMTURequest.Marshal(b, m, deterministic)
}
func (m *SetMTURequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetMTURequest.Merge(m, src)
}
func (m *SetMTURequest) XXX_Size() int {
	return xxx_messageInfo_SetMTURequest.Size(m)
}
func (m *SetMTURequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetMTURequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetMTURequest proto.InternalMessageInfo

func (m *SetMTURequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *SetMTURequest) GetMtu() int32 {
	if m != nil {
		return m.Mtu
	}
	return 0
}

type IdentifyRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Seconds              int32    `protobuf:"varint,10,opt,name=seconds,proto3" json:"seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdentifyRequest) Reset()         { *m = IdentifyRequest{} }
func (m *IdentifyRequest) String() string { return proto.CompactTextString(m) }
func (*IdentifyRequest) ProtoMessage()    {}
func (*IdentifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{3}
}

func (m *IdentifyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdentifyRequest.Unmarshal(m, b)
}
func (m *IdentifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdentifyRequest.Marshal(b, m, deterministic)
}
func (m *IdentifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdentifyRequest.Merge(m, src)
}
func (m *IdentifyRequest) XXX_Size() int {
	return xxx_messageInfo_IdentifyRequest.Size(m)
}
func (m *IdentifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IdentifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IdentifyRequest proto.InternalMessageInfo

func (m *IdentifyRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *IdentifyRequest) GetSeconds() int32 {
	if m != nil {
		return m.Seconds
	}
	return 0
}

type DeviceStatusResponse struct {
	Link                 string   `protobuf:"bytes,1,opt,name=link,proto3" json:"link,omitempty"`
	Promisc              string   `protobuf:"bytes,10,opt,name=promisc,proto3" json:"promisc,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceStatusResponse) Reset()         { *m = DeviceStatusResponse{} }
func (m *DeviceStatusResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceStatusResponse) ProtoMessage()    {}
func (*DeviceStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{4}
}

func (m *DeviceStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceStatusResponse.Unmarshal(m, b)
}
func (m *DeviceStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceStatusResponse.Marshal(b, m, deterministic)
}
func (m *DeviceStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceStatusResponse.Merge(m, src)
}
func (m *DeviceStatusResponse) XXX_Size() int {
	return xxx_messageInfo_DeviceStatusResponse.Size(m)
}
func (m *DeviceStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceStatusResponse proto.InternalMessageInfo

func (m *DeviceStatusResponse) GetLink() string {
	if m != nil {
		return m.Link
	}
	return ""
}

func (m *DeviceStatusResponse) GetPromisc() string {
	if m != nil {
		return m.Promisc
	}
	return ""
}

type NetplanEntriesResponse struct {
	Filenames            []string `protobuf:"bytes,1,rep,name=filenames,proto3" json:"filenames,omitempty"`
	Contents             []string `protobuf:"bytes,10,rep,name=contents,proto3" json:"contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetplanEntriesResponse) Reset()         { *m = NetplanEntriesResponse{} }
func (m *NetplanEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*NetplanEntriesResponse) ProtoMessage()    {}
func (*NetplanEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{5}
}

func (m *NetplanEntriesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetplanEntriesResponse.Unmarshal(m, b)
}
func (m *NetplanEntriesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetplanEntriesResponse.Marshal(b, m, deterministic)
}
func (m *NetplanEntriesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetplanEntriesResponse.Merge(m, src)
}
func (m *NetplanEntriesResponse) XXX_Size() int {
	return xxx_messageInfo_NetplanEntriesResponse.Size(m)
}
func (m *NetplanEntriesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetplanEntriesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetplanEntriesResponse proto.InternalMessageInfo

func (m *NetplanEntriesResponse) GetFilenames() []string {
	if m != nil {
		return m.Filenames
	}
	return nil
}

func (m *NetplanEntriesResponse) GetContents() []string {
	if m != nil {
		return m.Contents
	}
	return nil
}

type DelNetplanRequest struct {
	Filename             string   `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelNetplanRequest) Reset()         { *m = DelNetplanRequest{} }
func (m *DelNetplanRequest) String() string { return proto.CompactTextString(m) }
func (*DelNetplanRequest) ProtoMessage()    {}
func (*DelNetplanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{6}
}

func (m *DelNetplanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelNetplanRequest.Unmarshal(m, b)
}
func (m *DelNetplanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelNetplanRequest.Marshal(b, m, deterministic)
}
func (m *DelNetplanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelNetplanRequest.Merge(m, src)
}
func (m *DelNetplanRequest) XXX_Size() int {
	return xxx_messageInfo_DelNetplanRequest.Size(m)
}
func (m *DelNetplanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelNetplanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelNetplanRequest proto.InternalMessageInfo

func (m *DelNetplanRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type ChangeIpAddressRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	OldAddress           string   `protobuf:"bytes,10,opt,name=oldAddress,proto3" json:"oldAddress,omitempty"`
	NewAddress           string   `protobuf:"bytes,20,opt,name=newAddress,proto3" json:"newAddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeIpAddressRequest) Reset()         { *m = ChangeIpAddressRequest{} }
func (m *ChangeIpAddressRequest) String() string { return proto.CompactTextString(m) }
func (*ChangeIpAddressRequest) ProtoMessage()    {}
func (*ChangeIpAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{7}
}

func (m *ChangeIpAddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeIpAddressRequest.Unmarshal(m, b)
}
func (m *ChangeIpAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeIpAddressRequest.Marshal(b, m, deterministic)
}
func (m *ChangeIpAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeIpAddressRequest.Merge(m, src)
}
func (m *ChangeIpAddressRequest) XXX_Size() int {
	return xxx_messageInfo_ChangeIpAddressRequest.Size(m)
}
func (m *ChangeIpAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeIpAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeIpAddressRequest proto.InternalMessageInfo

func (m *ChangeIpAddressRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *ChangeIpAddressRequest) GetOldAddress() string {
	if m != nil {
		return m.OldAddress
	}
	return ""
}

func (m *ChangeIpAddressRequest) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

type VlanDeviceRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Vlanid               int32    `protobuf:"varint,10,opt,name=vlanid,proto3" json:"vlanid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VlanDeviceRequest) Reset()         { *m = VlanDeviceRequest{} }
func (m *VlanDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*VlanDeviceRequest) ProtoMessage()    {}
func (*VlanDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{8}
}

func (m *VlanDeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VlanDeviceRequest.Unmarshal(m, b)
}
func (m *VlanDeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VlanDeviceRequest.Marshal(b, m, deterministic)
}
func (m *VlanDeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VlanDeviceRequest.Merge(m, src)
}
func (m *VlanDeviceRequest) XXX_Size() int {
	return xxx_messageInfo_VlanDeviceRequest.Size(m)
}
func (m *VlanDeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VlanDeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VlanDeviceRequest proto.InternalMessageInfo

func (m *VlanDeviceRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *VlanDeviceRequest) GetVlanid() int32 {
	if m != nil {
		return m.Vlanid
	}
	return 0
}

type AddVirtualPairRequest struct {
	LeftName             string   `protobuf:"bytes,1,opt,name=leftName,proto3" json:"leftName,omitempty"`
	RightName            string   `protobuf:"bytes,10,opt,name=rightName,proto3" json:"rightName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddVirtualPairRequest) Reset()         { *m = AddVirtualPairRequest{} }
func (m *AddVirtualPairRequest) String() string { return proto.CompactTextString(m) }
func (*AddVirtualPairRequest) ProtoMessage()    {}
func (*AddVirtualPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{9}
}

func (m *AddVirtualPairRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddVirtualPairRequest.Unmarshal(m, b)
}
func (m *AddVirtualPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddVirtualPairRequest.Marshal(b, m, deterministic)
}
func (m *AddVirtualPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddVirtualPairRequest.Merge(m, src)
}
func (m *AddVirtualPairRequest) XXX_Size() int {
	return xxx_messageInfo_AddVirtualPairRequest.Size(m)
}
func (m *AddVirtualPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddVirtualPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddVirtualPairRequest proto.InternalMessageInfo

func (m *AddVirtualPairRequest) GetLeftName() string {
	if m != nil {
		return m.LeftName
	}
	return ""
}

func (m *AddVirtualPairRequest) GetRightName() string {
	if m != nil {
		return m.RightName
	}
	return ""
}

type AddRouteRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Via                  string   `protobuf:"bytes,10,opt,name=via,proto3" json:"via,omitempty"`
	Device               string   `protobuf:"bytes,20,opt,name=device,proto3" json:"device,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddRouteRequest) Reset()         { *m = AddRouteRequest{} }
func (m *AddRouteRequest) String() string { return proto.CompactTextString(m) }
func (*AddRouteRequest) ProtoMessage()    {}
func (*AddRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{10}
}

func (m *AddRouteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddRouteRequest.Unmarshal(m, b)
}
func (m *AddRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddRouteRequest.Marshal(b, m, deterministic)
}
func (m *AddRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddRouteRequest.Merge(m, src)
}
func (m *AddRouteRequest) XXX_Size() int {
	return xxx_messageInfo_AddRouteRequest.Size(m)
}
func (m *AddRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddRouteRequest proto.InternalMessageInfo

func (m *AddRouteRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AddRouteRequest) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

func (m *AddRouteRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

type AddNetplanEntryRequest struct {
	Yaml                 string   `protobuf:"bytes,1,opt,name=yaml,proto3" json:"yaml,omitempty"`
	Filename             string   `protobuf:"bytes,2,opt,name=filename,proto3" json:"filename,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddNetplanEntryRequest) Reset()         { *m = AddNetplanEntryRequest{} }
func (m *AddNetplanEntryRequest) String() string { return proto.CompactTextString(m) }
func (*AddNetplanEntryRequest) ProtoMessage()    {}
func (*AddNetplanEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{11}
}

func (m *AddNetplanEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddNetplanEntryRequest.Unmarshal(m, b)
}
func (m *AddNetplanEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddNetplanEntryRequest.Marshal(b, m, deterministic)
}
func (m *AddNetplanEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddNetplanEntryRequest.Merge(m, src)
}
func (m *AddNetplanEntryRequest) XXX_Size() int {
	return xxx_messageInfo_AddNetplanEntryRequest.Size(m)
}
func (m *AddNetplanEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddNetplanEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddNetplanEntryRequest proto.InternalMessageInfo

func (m *AddNetplanEntryRequest) GetYaml() string {
	if m != nil {
		return m.Yaml
	}
	return ""
}

func (m *AddNetplanEntryRequest) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

type AddressRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Address              string   `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddressRequest) Reset()         { *m = AddressRequest{} }
func (m *AddressRequest) String() string { return proto.CompactTextString(m) }
func (*AddressRequest) ProtoMessage()    {}
func (*AddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{12}
}

func (m *AddressRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddressRequest.Unmarshal(m, b)
}
func (m *AddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddressRequest.Marshal(b, m, deterministic)
}
func (m *AddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddressRequest.Merge(m, src)
}
func (m *AddressRequest) XXX_Size() int {
	return xxx_messageInfo_AddressRequest.Size(m)
}
func (m *AddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddressRequest proto.InternalMessageInfo

func (m *AddressRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AddressRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DeviceRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeviceRequest) Reset()         { *m = DeviceRequest{} }
func (m *DeviceRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRequest) ProtoMessage()    {}
func (*DeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{13}
}

func (m *DeviceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceRequest.Unmarshal(m, b)
}
func (m *DeviceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceRequest.Marshal(b, m, deterministic)
}
func (m *DeviceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRequest.Merge(m, src)
}
func (m *DeviceRequest) XXX_Size() int {
	return xxx_messageInfo_DeviceRequest.Size(m)
}
func (m *DeviceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRequest proto.InternalMessageInfo

func (m *DeviceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RouteModificationRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Via                  string   `protobuf:"bytes,10,opt,name=via,proto3" json:"via,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouteModificationRequest) Reset()         { *m = RouteModificationRequest{} }
func (m *RouteModificationRequest) String() string { return proto.CompactTextString(m) }
func (*RouteModificationRequest) ProtoMessage()    {}
func (*RouteModificationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{14}
}

func (m *RouteModificationRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouteModificationRequest.Unmarshal(m, b)
}
func (m *RouteModificationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouteModificationRequest.Marshal(b, m, deterministic)
}
func (m *RouteModificationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteModificationRequest.Merge(m, src)
}
func (m *RouteModificationRequest) XXX_Size() int {
	return xxx_messageInfo_RouteModificationRequest.Size(m)
}
func (m *RouteModificationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteModificationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouteModificationRequest proto.InternalMessageInfo

func (m *RouteModificationRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *RouteModificationRequest) GetVia() string {
	if m != nil {
		return m.Via
	}
	return ""
}

type GetRouteToHostRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRouteToHostRequest) Reset()         { *m = GetRouteToHostRequest{} }
func (m *GetRouteToHostRequest) String() string { return proto.CompactTextString(m) }
func (*GetRouteToHostRequest) ProtoMessage()    {}
func (*GetRouteToHostRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{15}
}

func (m *GetRouteToHostRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRouteToHostRequest.Unmarshal(m, b)
}
func (m *GetRouteToHostRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRouteToHostRequest.Marshal(b, m, deterministic)
}
func (m *GetRouteToHostRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRouteToHostRequest.Merge(m, src)
}
func (m *GetRouteToHostRequest) XXX_Size() int {
	return xxx_messageInfo_GetRouteToHostRequest.Size(m)
}
func (m *GetRouteToHostRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRouteToHostRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRouteToHostRequest proto.InternalMessageInfo

func (m *GetRouteToHostRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AddArpEntryRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Ip                   string   `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
	Mac                  string   `protobuf:"bytes,20,opt,name=mac,proto3" json:"mac,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddArpEntryRequest) Reset()         { *m = AddArpEntryRequest{} }
func (m *AddArpEntryRequest) String() string { return proto.CompactTextString(m) }
func (*AddArpEntryRequest) ProtoMessage()    {}
func (*AddArpEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{16}
}

func (m *AddArpEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddArpEntryRequest.Unmarshal(m, b)
}
func (m *AddArpEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddArpEntryRequest.Marshal(b, m, deterministic)
}
func (m *AddArpEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddArpEntryRequest.Merge(m, src)
}
func (m *AddArpEntryRequest) XXX_Size() int {
	return xxx_messageInfo_AddArpEntryRequest.Size(m)
}
func (m *AddArpEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddArpEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddArpEntryRequest proto.InternalMessageInfo

func (m *AddArpEntryRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *AddArpEntryRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *AddArpEntryRequest) GetMac() string {
	if m != nil {
		return m.Mac
	}
	return ""
}

type DelArpEntryRequest struct {
	Device               string   `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Ip                   string   `protobuf:"bytes,10,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelArpEntryRequest) Reset()         { *m = DelArpEntryRequest{} }
func (m *DelArpEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DelArpEntryRequest) ProtoMessage()    {}
func (*DelArpEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{17}
}

func (m *DelArpEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DelArpEntryRequest.Unmarshal(m, b)
}
func (m *DelArpEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DelArpEntryRequest.Marshal(b, m, deterministic)
}
func (m *DelArpEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelArpEntryRequest.Merge(m, src)
}
func (m *DelArpEntryRequest) XXX_Size() int {
	return xxx_messageInfo_DelArpEntryRequest.Size(m)
}
func (m *DelArpEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelArpEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelArpEntryRequest proto.InternalMessageInfo

func (m *DelArpEntryRequest) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DelArpEntryRequest) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type CreateBridgeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Iface1               string   `protobuf:"bytes,10,opt,name=iface1,proto3" json:"iface1,omitempty"`
	Iface2               string   `protobuf:"bytes,20,opt,name=iface2,proto3" json:"iface2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateBridgeRequest) Reset()         { *m = CreateBridgeRequest{} }
func (m *CreateBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*CreateBridgeRequest) ProtoMessage()    {}
func (*CreateBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{18}
}

func (m *CreateBridgeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateBridgeRequest.Unmarshal(m, b)
}
func (m *CreateBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateBridgeRequest.Marshal(b, m, deterministic)
}
func (m *CreateBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateBridgeRequest.Merge(m, src)
}
func (m *CreateBridgeRequest) XXX_Size() int {
	return xxx_messageInfo_CreateBridgeRequest.Size(m)
}
func (m *CreateBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateBridgeRequest proto.InternalMessageInfo

func (m *CreateBridgeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateBridgeRequest) GetIface1() string {
	if m != nil {
		return m.Iface1
	}
	return ""
}

func (m *CreateBridgeRequest) GetIface2() string {
	if m != nil {
		return m.Iface2
	}
	return ""
}

type RemoveBridgeRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveBridgeRequest) Reset()         { *m = RemoveBridgeRequest{} }
func (m *RemoveBridgeRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveBridgeRequest) ProtoMessage()    {}
func (*RemoveBridgeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{19}
}

func (m *RemoveBridgeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveBridgeRequest.Unmarshal(m, b)
}
func (m *RemoveBridgeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveBridgeRequest.Marshal(b, m, deterministic)
}
func (m *RemoveBridgeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveBridgeRequest.Merge(m, src)
}
func (m *RemoveBridgeRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveBridgeRequest.Size(m)
}
func (m *RemoveBridgeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveBridgeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveBridgeRequest proto.InternalMessageInfo

func (m *RemoveBridgeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetBridgeInterfacesRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBridgeInterfacesRequest) Reset()         { *m = GetBridgeInterfacesRequest{} }
func (m *GetBridgeInterfacesRequest) String() string { return proto.CompactTextString(m) }
func (*GetBridgeInterfacesRequest) ProtoMessage()    {}
func (*GetBridgeInterfacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{20}
}

func (m *GetBridgeInterfacesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetBridgeInterfacesRequest.Unmarshal(m, b)
}
func (m *GetBridgeInterfacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetBridgeInterfacesRequest.Marshal(b, m, deterministic)
}
func (m *GetBridgeInterfacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBridgeInterfacesRequest.Merge(m, src)
}
func (m *GetBridgeInterfacesRequest) XXX_Size() int {
	return xxx_messageInfo_GetBridgeInterfacesRequest.Size(m)
}
func (m *GetBridgeInterfacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBridgeInterfacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBridgeInterfacesRequest proto.InternalMessageInfo

func (m *GetBridgeInterfacesRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type StringListResponse struct {
	Item                 []string `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringListResponse) Reset()         { *m = StringListResponse{} }
func (m *StringListResponse) String() string { return proto.CompactTextString(m) }
func (*StringListResponse) ProtoMessage()    {}
func (*StringListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{21}
}

func (m *StringListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringListResponse.Unmarshal(m, b)
}
func (m *StringListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringListResponse.Marshal(b, m, deterministic)
}
func (m *StringListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringListResponse.Merge(m, src)
}
func (m *StringListResponse) XXX_Size() int {
	return xxx_messageInfo_StringListResponse.Size(m)
}
func (m *StringListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringListResponse proto.InternalMessageInfo

func (m *StringListResponse) GetItem() []string {
	if m != nil {
		return m.Item
	}
	return nil
}

type StringResponse struct {
	Item                 string   `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringResponse) Reset()         { *m = StringResponse{} }
func (m *StringResponse) String() string { return proto.CompactTextString(m) }
func (*StringResponse) ProtoMessage()    {}
func (*StringResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{22}
}

func (m *StringResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringResponse.Unmarshal(m, b)
}
func (m *StringResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringResponse.Marshal(b, m, deterministic)
}
func (m *StringResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringResponse.Merge(m, src)
}
func (m *StringResponse) XXX_Size() int {
	return xxx_messageInfo_StringResponse.Size(m)
}
func (m *StringResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StringResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StringResponse proto.InternalMessageInfo

func (m *StringResponse) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

type Int32Response struct {
	Item                 int32    `protobuf:"varint,1,opt,name=item,proto3" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Int32Response) Reset()         { *m = Int32Response{} }
func (m *Int32Response) String() string { return proto.CompactTextString(m) }
func (*Int32Response) ProtoMessage()    {}
func (*Int32Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8bd0a4a2e43bb94, []int{23}
}

func (m *Int32Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Int32Response.Unmarshal(m, b)
}
func (m *Int32Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Int32Response.Marshal(b, m, deterministic)
}
func (m *Int32Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Int32Response.Merge(m, src)
}
func (m *Int32Response) XXX_Size() int {
	return xxx_messageInfo_Int32Response.Size(m)
}
func (m *Int32Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Int32Response.DiscardUnknown(m)
}

var xxx_messageInfo_Int32Response proto.InternalMessageInfo

func (m *Int32Response) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func init() {
	proto.RegisterType((*NamedRequest)(nil), "toolkitd.NamedRequest")
	proto.RegisterType((*SetDeviceBoolRequest)(nil), "toolkitd.SetDeviceBoolRequest")
	proto.RegisterType((*SetMTURequest)(nil), "toolkitd.SetMTURequest")
	proto.RegisterType((*IdentifyRequest)(nil), "toolkitd.IdentifyRequest")
	proto.RegisterType((*DeviceStatusResponse)(nil), "toolkitd.DeviceStatusResponse")
	proto.RegisterType((*NetplanEntriesResponse)(nil), "toolkitd.NetplanEntriesResponse")
	proto.RegisterType((*DelNetplanRequest)(nil), "toolkitd.DelNetplanRequest")
	proto.RegisterType((*ChangeIpAddressRequest)(nil), "toolkitd.ChangeIpAddressRequest")
	proto.RegisterType((*VlanDeviceRequest)(nil), "toolkitd.VlanDeviceRequest")
	proto.RegisterType((*AddVirtualPairRequest)(nil), "toolkitd.AddVirtualPairRequest")
	proto.RegisterType((*AddRouteRequest)(nil), "toolkitd.AddRouteRequest")
	proto.RegisterType((*AddNetplanEntryRequest)(nil), "toolkitd.AddNetplanEntryRequest")
	proto.RegisterType((*AddressRequest)(nil), "toolkitd.AddressRequest")
	proto.RegisterType((*DeviceRequest)(nil), "toolkitd.DeviceRequest")
	proto.RegisterType((*RouteModificationRequest)(nil), "toolkitd.RouteModificationRequest")
	proto.RegisterType((*GetRouteToHostRequest)(nil), "toolkitd.GetRouteToHostRequest")
	proto.RegisterType((*AddArpEntryRequest)(nil), "toolkitd.AddArpEntryRequest")
	proto.RegisterType((*DelArpEntryRequest)(nil), "toolkitd.DelArpEntryRequest")
	proto.RegisterType((*CreateBridgeRequest)(nil), "toolkitd.CreateBridgeRequest")
	proto.RegisterType((*RemoveBridgeRequest)(nil), "toolkitd.RemoveBridgeRequest")
	proto.RegisterType((*GetBridgeInterfacesRequest)(nil), "toolkitd.GetBridgeInterfacesRequest")
	proto.RegisterType((*StringListResponse)(nil), "toolkitd.StringListResponse")
	proto.RegisterType((*StringResponse)(nil), "toolkitd.StringResponse")
	proto.RegisterType((*Int32Response)(nil), "toolkitd.Int32Response")
}

func init() { proto.RegisterFile("toolkit.proto", fileDescriptor_a8bd0a4a2e43bb94) }

var fileDescriptor_a8bd0a4a2e43bb94 = []byte{
	// 1304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdb, 0x6e, 0x1b, 0x37,
	0x13, 0x8e, 0x9d, 0x3f, 0x8e, 0x35, 0x89, 0xe5, 0x98, 0x76, 0xfc, 0xab, 0x4a, 0x9a, 0x1a, 0x4c,
	0x0a, 0xb8, 0x37, 0x72, 0xa3, 0x14, 0x06, 0x8a, 0x06, 0x29, 0x74, 0xb0, 0x25, 0x35, 0xb6, 0x9a,
	0x48, 0x4e, 0x80, 0xb6, 0x57, 0x6b, 0x71, 0xa4, 0x10, 0xa6, 0x96, 0xdb, 0x5d, 0xca, 0x86, 0x5e,
	0xa9, 0xcf, 0xd0, 0xfb, 0x3e, 0x4d, 0xdf, 0xa1, 0xe0, 0x1e, 0xb4, 0x5c, 0x1d, 0x56, 0xc6, 0xca,
	0x77, 0x3c, 0x0c, 0xbf, 0x9d, 0x19, 0x7e, 0xc3, 0x99, 0x59, 0xd8, 0x52, 0x52, 0x8a, 0x2b, 0xae,
	0x4a, 0x8e, 0x2b, 0x95, 0x24, 0x9b, 0xe1, 0x94, 0x15, 0x9f, 0x0d, 0xa4, 0x1c, 0x08, 0x3c, 0xf2,
	0xd7, 0x2f, 0x47, 0xfd, 0x23, 0x1c, 0x3a, 0x6a, 0x1c, 0x88, 0x51, 0x0a, 0x8f, 0xdb, 0xd6, 0x10,
	0x59, 0x07, 0xff, 0x1c, 0xa1, 0xa7, 0x08, 0x81, 0xff, 0xd9, 0xd6, 0x10, 0x0b, 0x6b, 0x07, 0x6b,
	0x87, 0xb9, 0x8e, 0x3f, 0xa6, 0x4d, 0xd8, 0xeb, 0xa2, 0xaa, 0xe3, 0x35, 0xef, 0x61, 0x55, 0x4a,
	0x11, 0xc9, 0xee, 0xc3, 0x06, 0xf3, 0x17, 0x43, 0xe9, 0x70, 0x46, 0x0a, 0xf0, 0x10, 0x6d, 0xeb,
	0x52, 0x20, 0x2b, 0xc0, 0xc1, 0xda, 0xe1, 0x66, 0x27, 0x9a, 0xd2, 0x1f, 0x61, 0xab, 0x8b, 0xea,
	0xfc, 0xe2, 0xd3, 0x32, 0x88, 0x27, 0x70, 0x7f, 0xa8, 0x46, 0xfe, 0xf1, 0x07, 0x1d, 0x3d, 0xa4,
	0x35, 0xd8, 0x6e, 0x31, 0xb4, 0x15, 0xef, 0x8f, 0x6f, 0xf1, 0x7d, 0x0f, 0x7b, 0xd2, 0x66, 0x5e,
	0x08, 0x10, 0x4d, 0x69, 0x1d, 0xf6, 0x02, 0x33, 0xba, 0xca, 0x52, 0x23, 0xaf, 0x83, 0x9e, 0x23,
	0x6d, 0x0f, 0xb5, 0xd5, 0x82, 0xdb, 0x57, 0x91, 0xd5, 0x7a, 0xac, 0x51, 0x1c, 0x57, 0x0e, 0xb9,
	0xd7, 0xf3, 0x51, 0x72, 0x9d, 0x68, 0x4a, 0x3b, 0xb0, 0xdf, 0x46, 0xe5, 0x08, 0xcb, 0x3e, 0xb1,
	0x95, 0xcb, 0x31, 0xc6, 0x79, 0x0e, 0xb9, 0x3e, 0x17, 0xa8, 0xbd, 0xe6, 0x15, 0xd6, 0x0e, 0xee,
	0x1f, 0xe6, 0x3a, 0xf1, 0x02, 0x29, 0xc2, 0x66, 0x4f, 0xda, 0x0a, 0x6d, 0xa5, 0x15, 0xd3, 0x9b,
	0x93, 0x39, 0x3d, 0x82, 0x9d, 0x3a, 0x8a, 0x10, 0x36, 0x32, 0xb0, 0x08, 0x9b, 0xd1, 0xe9, 0x50,
	0xb5, 0xc9, 0x9c, 0x3a, 0xb0, 0x5f, 0xfb, 0x62, 0xd9, 0x03, 0x6c, 0x39, 0x15, 0xc6, 0x5c, 0xf4,
	0xbc, 0x65, 0x6e, 0x79, 0x01, 0x20, 0x05, 0x0b, 0x85, 0x43, 0x9b, 0x8c, 0x15, 0xbd, 0x6f, 0xe3,
	0x4d, 0xb4, 0xbf, 0x17, 0xec, 0xc7, 0x2b, 0xb4, 0x06, 0x3b, 0x9f, 0x85, 0x65, 0x07, 0x0e, 0x5c,
	0xf6, 0xb1, 0x7d, 0xd8, 0xb8, 0x16, 0x96, 0xcd, 0x59, 0x78, 0x05, 0xe1, 0x8c, 0x7e, 0x84, 0xa7,
	0x15, 0xc6, 0x3e, 0x73, 0x57, 0x8d, 0x2c, 0xf1, 0xc1, 0xe2, 0xae, 0x61, 0xab, 0xc0, 0xbe, 0x6a,
	0x1b, 0xb6, 0x46, 0x73, 0xed, 0x56, 0x97, 0x0f, 0xbe, 0x04, 0x9b, 0x81, 0xe2, 0xf1, 0x02, 0xfd,
	0x04, 0xdb, 0x15, 0xc6, 0x3a, 0x72, 0xa4, 0x26, 0x5a, 0x15, 0xe0, 0xa1, 0x15, 0xda, 0x11, 0x60,
	0x45, 0x53, 0x4d, 0xac, 0x6b, 0x6e, 0x85, 0x20, 0x7a, 0x68, 0x58, 0xb0, 0x67, 0x5a, 0x40, 0x9b,
	0xb0, 0x5f, 0x61, 0xcc, 0xb8, 0xe8, 0xb1, 0x11, 0x23, 0x63, 0x6b, 0x28, 0x22, 0xb6, 0xe8, 0x71,
	0xe2, 0xaa, 0xd6, 0xa7, 0xae, 0xaa, 0x0a, 0xf9, 0x5b, 0x5e, 0x91, 0xa1, 0x37, 0x24, 0xf4, 0xa6,
	0x2f, 0x61, 0x2b, 0xe9, 0xf8, 0x79, 0x81, 0x7a, 0x0a, 0x05, 0xdf, 0x0d, 0xe7, 0x92, 0xf1, 0x3e,
	0xef, 0x59, 0x8a, 0x4b, 0x3b, 0x83, 0x4b, 0xe8, 0x6b, 0x78, 0xda, 0x40, 0xe5, 0x43, 0x5d, 0xc8,
	0xa6, 0xf4, 0xd4, 0x52, 0x10, 0xda, 0x06, 0x52, 0x61, 0xac, 0xe2, 0x3a, 0x09, 0x4f, 0x2d, 0xb2,
	0x33, 0x0f, 0xeb, 0xdc, 0x09, 0xbf, 0xb8, 0xce, 0x1d, 0x3f, 0xdc, 0xad, 0x5e, 0x78, 0x01, 0x7a,
	0x48, 0xdf, 0x02, 0xa9, 0xa3, 0xc8, 0x88, 0x47, 0x7f, 0x83, 0xdd, 0x9a, 0x8b, 0x96, 0xc2, 0xaa,
	0xcb, 0xd9, 0x20, 0xcd, 0x67, 0x1a, 0x92, 0xf7, 0xad, 0x1e, 0xbe, 0x0e, 0x8f, 0x87, 0xb3, 0xc9,
	0x7a, 0x39, 0xa2, 0x45, 0x30, 0xa3, 0xdf, 0xc1, 0x6e, 0x07, 0x87, 0xf2, 0x7a, 0x39, 0x34, 0xfd,
	0x1e, 0x8a, 0x0d, 0x54, 0x81, 0x5c, 0xcb, 0x56, 0xe8, 0x6a, 0x04, 0x2f, 0xed, 0xc4, 0x21, 0x90,
	0xae, 0x72, 0xb9, 0x3d, 0x38, 0xe3, 0xda, 0xe9, 0xf1, 0xeb, 0xc4, 0x15, 0x0e, 0xc3, 0x07, 0xc5,
	0x1f, 0xd3, 0x57, 0x90, 0x0f, 0x24, 0xe7, 0x48, 0xad, 0x4d, 0xa4, 0x5e, 0xc2, 0x56, 0xcb, 0x56,
	0x6f, 0xca, 0x73, 0x85, 0x1e, 0x04, 0x42, 0xe5, 0x33, 0xd8, 0xe8, 0x8e, 0x3d, 0x85, 0x43, 0x52,
	0x85, 0x7c, 0x07, 0x3d, 0x65, 0xb9, 0xaa, 0x8b, 0x6e, 0x10, 0xc6, 0xa5, 0x28, 0x8d, 0x94, 0xcc,
	0x34, 0x51, 0xdc, 0x2f, 0x05, 0x49, 0xa5, 0x14, 0x25, 0x95, 0xd2, 0x89, 0x4e, 0x2a, 0xf4, 0x5e,
	0xf9, 0xdf, 0x07, 0xf0, 0xb0, 0x8d, 0xea, 0x46, 0xba, 0x57, 0xe4, 0x04, 0x1e, 0x19, 0xa4, 0x20,
	0xcf, 0x63, 0xb0, 0x59, 0xae, 0x2c, 0x86, 0x24, 0x4d, 0xd8, 0x8c, 0x02, 0x9c, 0xd0, 0x18, 0x63,
	0x11, 0xd5, 0x53, 0x90, 0x4e, 0xe0, 0x91, 0xc1, 0x2a, 0x53, 0xa1, 0x59, 0xb2, 0xa5, 0x2b, 0x54,
	0x47, 0x71, 0x47, 0x0a, 0x35, 0x50, 0x55, 0x5c, 0xe7, 0x42, 0x27, 0x48, 0xb2, 0x40, 0xb0, 0x68,
	0x28, 0x3a, 0xcb, 0x0f, 0x7a, 0x8f, 0x7c, 0x84, 0x7c, 0x32, 0x60, 0xc9, 0x37, 0xf1, 0x89, 0xb9,
	0xa1, 0xbc, 0x14, 0xb2, 0x06, 0xb9, 0xe8, 0xa0, 0x97, 0x59, 0xaf, 0x3a, 0x40, 0x03, 0x55, 0x57,
	0xf6, 0xae, 0x50, 0x65, 0x47, 0x39, 0x87, 0xdd, 0x18, 0xa5, 0x3a, 0xfe, 0xe0, 0xca, 0x9e, 0x7e,
	0xb7, 0xb2, 0xc2, 0x9d, 0x01, 0x89, 0xe1, 0xea, 0xa8, 0x2c, 0x2e, 0x90, 0x65, 0x45, 0x2b, 0xff,
	0xbd, 0x0b, 0x4f, 0x42, 0xbe, 0x4f, 0x62, 0x9c, 0xbc, 0x83, 0x5c, 0x85, 0xb1, 0xe0, 0xc1, 0x26,
	0xff, 0x37, 0x59, 0x66, 0x3c, 0xe1, 0x29, 0xb4, 0xa8, 0xfb, 0x19, 0xa3, 0xe5, 0x5c, 0xff, 0x10,
	0x25, 0xe7, 0x42, 0x22, 0x76, 0x8c, 0x5c, 0x72, 0x1b, 0x94, 0xe3, 0x55, 0x50, 0xde, 0xfb, 0x19,
	0xfb, 0xac, 0x7c, 0x3e, 0x12, 0x8a, 0xf7, 0x2c, 0x4f, 0xad, 0x02, 0xf6, 0xab, 0x9f, 0xab, 0xcd,
	0xa4, 0x4a, 0x0e, 0x12, 0x30, 0x73, 0xf2, 0x6d, 0xb1, 0x30, 0x7d, 0x05, 0xc6, 0x65, 0x9e, 0xc6,
	0xc9, 0xff, 0x42, 0xb6, 0x7c, 0xe7, 0x7f, 0x95, 0x00, 0x34, 0xeb, 0x82, 0x54, 0x2b, 0xf3, 0xc9,
	0xba, 0xc4, 0x8c, 0xa0, 0xb9, 0x15, 0x4b, 0x0a, 0xd8, 0x29, 0x6c, 0xe9, 0x23, 0x93, 0x62, 0x89,
	0x3c, 0x8b, 0xb1, 0x66, 0x4a, 0xa8, 0x54, 0x6f, 0xed, 0x44, 0x35, 0x5e, 0xcc, 0x04, 0xc3, 0x5f,
	0xf3, 0x0b, 0xc0, 0x5b, 0x02, 0x1e, 0xdf, 0x05, 0xe0, 0x3b, 0xc8, 0xd5, 0x51, 0xac, 0x44, 0xf4,
	0x3a, 0x8a, 0x3b, 0x20, 0x7a, 0x80, 0xb2, 0x2a, 0xd1, 0xeb, 0x28, 0xee, 0x88, 0xe8, 0x4d, 0xd8,
	0x8e, 0xeb, 0xf9, 0x80, 0xe8, 0xcf, 0x12, 0xd9, 0x26, 0x59, 0xea, 0xa7, 0x20, 0xd5, 0x7c, 0xe3,
	0x4c, 0x66, 0x66, 0xf0, 0xf3, 0xa9, 0x2e, 0x1f, 0xc5, 0xea, 0x8c, 0xac, 0xfa, 0xf9, 0xaa, 0x26,
	0x47, 0xfa, 0xa9, 0xf3, 0x16, 0x6b, 0x92, 0x16, 0xb2, 0x2d, 0xff, 0xfd, 0x6d, 0x5a, 0x2e, 0xbb,
	0xb1, 0x5c, 0x8c, 0x9c, 0x9c, 0x11, 0x4a, 0xe7, 0x3d, 0x93, 0x3e, 0x0b, 0x61, 0x96, 0x65, 0x85,
	0x09, 0xd4, 0xf1, 0xca, 0x50, 0x6f, 0x61, 0xa3, 0xe1, 0x77, 0xb9, 0x8b, 0x21, 0x8c, 0x8d, 0x44,
	0x81, 0x16, 0xc4, 0x68, 0x03, 0x55, 0xb2, 0xc1, 0x5c, 0x98, 0x9d, 0x8c, 0xd8, 0x9d, 0xdf, 0x92,
	0xd2, 0x7b, 0xe4, 0x67, 0xd8, 0xd4, 0xf9, 0x4e, 0x59, 0x2a, 0xa3, 0x97, 0x4f, 0xfd, 0x52, 0x20,
	0x68, 0x99, 0x17, 0x23, 0xbc, 0x98, 0xde, 0x48, 0xf6, 0xd8, 0x81, 0x22, 0x51, 0x0b, 0x6f, 0x3e,
	0xd2, 0x53, 0x6d, 0x7d, 0xea, 0xf3, 0xf5, 0x54, 0xbb, 0x7a, 0x8a, 0x3a, 0xb8, 0x52, 0x29, 0xa0,
	0x57, 0x26, 0x89, 0xbb, 0xed, 0xf7, 0xe9, 0x59, 0xd1, 0xde, 0xc3, 0x8e, 0x8f, 0x16, 0xd3, 0xf1,
	0x4e, 0xc0, 0x8e, 0x57, 0x07, 0x6b, 0x02, 0xe9, 0xce, 0x86, 0x5c, 0x96, 0x77, 0xed, 0x27, 0xd8,
	0xe8, 0xce, 0x70, 0x3b, 0xf1, 0x4f, 0x27, 0xe5, 0xf0, 0x2f, 0x90, 0xef, 0xa2, 0xfa, 0x10, 0xfc,
	0x46, 0x19, 0xc9, 0x91, 0x47, 0x5e, 0x24, 0x40, 0x66, 0x7e, 0x31, 0xa5, 0x56, 0xce, 0xb9, 0xee,
	0x84, 0x94, 0x99, 0x61, 0xca, 0xff, 0xac, 0xc3, 0x76, 0x58, 0xbe, 0xf9, 0x8d, 0x1a, 0xb7, 0x07,
	0xa4, 0x01, 0x8f, 0xcd, 0xee, 0x91, 0x7c, 0x6d, 0x24, 0xc8, 0xd9, 0xae, 0x32, 0x45, 0xc7, 0x06,
	0x3c, 0x36, 0x7b, 0x45, 0x13, 0x68, 0x4e, 0x0f, 0x99, 0xde, 0x26, 0xe8, 0x1b, 0x0d, 0xc4, 0xb3,
	0xd3, 0xe0, 0x0f, 0xbf, 0x90, 0x9e, 0x6e, 0x48, 0xc9, 0xab, 0x44, 0xaf, 0xb0, 0xa0, 0x5f, 0x5d,
	0x06, 0x5e, 0x3d, 0xfd, 0xfd, 0xdb, 0x01, 0x57, 0x5f, 0x46, 0x97, 0xa5, 0x9e, 0x1c, 0x1e, 0x55,
	0x1b, 0x2e, 0xde, 0xa0, 0x10, 0x47, 0xd1, 0xa1, 0xc9, 0xef, 0xc7, 0xbf, 0xd6, 0x9f, 0x57, 0xd1,
	0x0e, 0xb7, 0x63, 0xcc, 0x68, 0xfb, 0x72, 0xc3, 0x1f, 0xbd, 0xf9, 0x2f, 0x00, 0x00, 0xff, 0xff,
	0xad, 0x0b, 0xc3, 0x9b, 0xd0, 0x14, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SystemClient is the client API for System service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SystemClient interface {
	RestartService(ctx context.Context, in *NamedRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type systemClient struct {
	cc *grpc.ClientConn
}

func NewSystemClient(cc *grpc.ClientConn) SystemClient {
	return &systemClient{cc}
}

func (c *systemClient) RestartService(ctx context.Context, in *NamedRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.System/RestartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SystemServer is the server API for System service.
type SystemServer interface {
	RestartService(context.Context, *NamedRequest) (*empty.Empty, error)
}

// UnimplementedSystemServer can be embedded to have forward compatible implementations.
type UnimplementedSystemServer struct {
}

func (*UnimplementedSystemServer) RestartService(ctx context.Context, req *NamedRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}

func RegisterSystemServer(s *grpc.Server, srv SystemServer) {
	s.RegisterService(&_System_serviceDesc, srv)
}

func _System_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.System/RestartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemServer).RestartService(ctx, req.(*NamedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _System_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toolkitd.System",
	HandlerType: (*SystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RestartService",
			Handler:    _System_RestartService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toolkit.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
	AddArpEntry(ctx context.Context, in *AddArpEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddRoute(ctx context.Context, in *RouteModificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelArpEntry(ctx context.Context, in *DelArpEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelRoute(ctx context.Context, in *RouteModificationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetArpTable(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	GetRouteToHost(ctx context.Context, in *GetRouteToHostRequest, opts ...grpc.CallOption) (*StringListResponse, error)
	GetRoutes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	GetSockets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	GetSocketsByProcess(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	GetSocketsDetailed(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
}

type networkClient struct {
	cc *grpc.ClientConn
}

func NewNetworkClient(cc *grpc.ClientConn) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) AddArpEntry(ctx context.Context, in *AddArpEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/AddArpEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) AddRoute(ctx context.Context, in *RouteModificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DelArpEntry(ctx context.Context, in *DelArpEntryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/DelArpEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DelRoute(ctx context.Context, in *RouteModificationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/DelRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetArpTable(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetArpTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetRouteToHost(ctx context.Context, in *GetRouteToHostRequest, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetRouteToHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetRoutes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSockets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetSockets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSocketsByProcess(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetSocketsByProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) GetSocketsDetailed(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.Network/GetSocketsDetailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
	AddArpEntry(context.Context, *AddArpEntryRequest) (*empty.Empty, error)
	AddRoute(context.Context, *RouteModificationRequest) (*empty.Empty, error)
	DelArpEntry(context.Context, *DelArpEntryRequest) (*empty.Empty, error)
	DelRoute(context.Context, *RouteModificationRequest) (*empty.Empty, error)
	GetArpTable(context.Context, *empty.Empty) (*StringListResponse, error)
	GetRouteToHost(context.Context, *GetRouteToHostRequest) (*StringListResponse, error)
	GetRoutes(context.Context, *empty.Empty) (*StringListResponse, error)
	GetSockets(context.Context, *empty.Empty) (*StringListResponse, error)
	GetSocketsByProcess(context.Context, *empty.Empty) (*StringListResponse, error)
	GetSocketsDetailed(context.Context, *empty.Empty) (*StringListResponse, error)
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (*UnimplementedNetworkServer) AddArpEntry(ctx context.Context, req *AddArpEntryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddArpEntry not implemented")
}
func (*UnimplementedNetworkServer) AddRoute(ctx context.Context, req *RouteModificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (*UnimplementedNetworkServer) DelArpEntry(ctx context.Context, req *DelArpEntryRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelArpEntry not implemented")
}
func (*UnimplementedNetworkServer) DelRoute(ctx context.Context, req *RouteModificationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoute not implemented")
}
func (*UnimplementedNetworkServer) GetArpTable(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArpTable not implemented")
}
func (*UnimplementedNetworkServer) GetRouteToHost(ctx context.Context, req *GetRouteToHostRequest) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteToHost not implemented")
}
func (*UnimplementedNetworkServer) GetRoutes(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutes not implemented")
}
func (*UnimplementedNetworkServer) GetSockets(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSockets not implemented")
}
func (*UnimplementedNetworkServer) GetSocketsByProcess(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocketsByProcess not implemented")
}
func (*UnimplementedNetworkServer) GetSocketsDetailed(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSocketsDetailed not implemented")
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

func _Network_AddArpEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddArpEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).AddArpEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/AddArpEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).AddArpEntry(ctx, req.(*AddArpEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteModificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).AddRoute(ctx, req.(*RouteModificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DelArpEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelArpEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DelArpEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/DelArpEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DelArpEntry(ctx, req.(*DelArpEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DelRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteModificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DelRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/DelRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DelRoute(ctx, req.(*RouteModificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetArpTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetArpTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetArpTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetArpTable(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetRouteToHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteToHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetRouteToHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetRouteToHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetRouteToHost(ctx, req.(*GetRouteToHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetRoutes(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSockets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSockets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetSockets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSockets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSocketsByProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSocketsByProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetSocketsByProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSocketsByProcess(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_GetSocketsDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetSocketsDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.Network/GetSocketsDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetSocketsDetailed(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toolkitd.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddArpEntry",
			Handler:    _Network_AddArpEntry_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Network_AddRoute_Handler,
		},
		{
			MethodName: "DelArpEntry",
			Handler:    _Network_DelArpEntry_Handler,
		},
		{
			MethodName: "DelRoute",
			Handler:    _Network_DelRoute_Handler,
		},
		{
			MethodName: "GetArpTable",
			Handler:    _Network_GetArpTable_Handler,
		},
		{
			MethodName: "GetRouteToHost",
			Handler:    _Network_GetRouteToHost_Handler,
		},
		{
			MethodName: "GetRoutes",
			Handler:    _Network_GetRoutes_Handler,
		},
		{
			MethodName: "GetSockets",
			Handler:    _Network_GetSockets_Handler,
		},
		{
			MethodName: "GetSocketsByProcess",
			Handler:    _Network_GetSocketsByProcess_Handler,
		},
		{
			MethodName: "GetSocketsDetailed",
			Handler:    _Network_GetSocketsDetailed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toolkit.proto",
}

// NetworkInterfaceClient is the client API for NetworkInterface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkInterfaceClient interface {
	AddDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddIpv4Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddIpv6Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddL2MulticastAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddNetplanEntry(ctx context.Context, in *AddNetplanEntryRequest, opts ...grpc.CallOption) (*StringResponse, error)
	AddRouteToIface(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddVirtualPair(ctx context.Context, in *AddVirtualPairRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	AddVlanDevice(ctx context.Context, in *VlanDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeIpv4Address(ctx context.Context, in *ChangeIpAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ChangeIpv6Address(ctx context.Context, in *ChangeIpAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelIpv4Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelIpv6Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelL2MulticastAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelNetplanEntry(ctx context.Context, in *DelNetplanRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelVirtualPair(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	DelVlanDevice(ctx context.Context, in *VlanDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	GetCounters(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetHardwareAddress(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetIpv4Address(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringListResponse, error)
	GetIpv6Address(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringListResponse, error)
	GetMTU(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Int32Response, error)
	GetNetplanEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetplanEntriesResponse, error)
	GetStats(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error)
	GetStatus(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error)
	Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListHardwareAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	ListInterfaceNames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	ListIpv4Addresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	ListIpv6Addresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	SetHardwareAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetMTU(ctx context.Context, in *SetMTURequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetPromiscuous(ctx context.Context, in *SetDeviceBoolRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	SetStatus(ctx context.Context, in *SetDeviceBoolRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type networkInterfaceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkInterfaceClient(cc *grpc.ClientConn) NetworkInterfaceClient {
	return &networkInterfaceClient{cc}
}

func (c *networkInterfaceClient) AddDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddIpv4Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddIpv4Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddIpv6Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddIpv6Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddL2MulticastAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddL2MulticastAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddNetplanEntry(ctx context.Context, in *AddNetplanEntryRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddNetplanEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddRouteToIface(ctx context.Context, in *AddRouteRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddRouteToIface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddVirtualPair(ctx context.Context, in *AddVirtualPairRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddVirtualPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) AddVlanDevice(ctx context.Context, in *VlanDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/AddVlanDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ChangeIpv4Address(ctx context.Context, in *ChangeIpAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ChangeIpv4Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ChangeIpv6Address(ctx context.Context, in *ChangeIpAddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ChangeIpv6Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelDevice(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelIpv4Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelIpv4Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelIpv6Address(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelIpv6Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelL2MulticastAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelL2MulticastAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelNetplanEntry(ctx context.Context, in *DelNetplanRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelNetplanEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelVirtualPair(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelVirtualPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) DelVlanDevice(ctx context.Context, in *VlanDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/DelVlanDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetCounters(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetHardwareAddress(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetHardwareAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetIpv4Address(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetIpv4Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetIpv6Address(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetIpv6Address", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetMTU(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*Int32Response, error) {
	out := new(Int32Response)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetMTU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetNetplanEntries(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NetplanEntriesResponse, error) {
	out := new(NetplanEntriesResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetNetplanEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetStats(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) GetStatus(ctx context.Context, in *DeviceRequest, opts ...grpc.CallOption) (*DeviceStatusResponse, error) {
	out := new(DeviceStatusResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) Identify(ctx context.Context, in *IdentifyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/Identify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ListHardwareAddresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ListHardwareAddresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ListInterfaceNames(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ListInterfaceNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ListIpv4Addresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ListIpv4Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) ListIpv6Addresses(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/ListIpv6Addresses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) SetHardwareAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/SetHardwareAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) SetMTU(ctx context.Context, in *SetMTURequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/SetMTU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) SetPromiscuous(ctx context.Context, in *SetDeviceBoolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/SetPromiscuous", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkInterfaceClient) SetStatus(ctx context.Context, in *SetDeviceBoolRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkInterface/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkInterfaceServer is the server API for NetworkInterface service.
type NetworkInterfaceServer interface {
	AddDevice(context.Context, *DeviceRequest) (*empty.Empty, error)
	AddIpv4Address(context.Context, *AddressRequest) (*empty.Empty, error)
	AddIpv6Address(context.Context, *AddressRequest) (*empty.Empty, error)
	AddL2MulticastAddress(context.Context, *AddressRequest) (*empty.Empty, error)
	AddNetplanEntry(context.Context, *AddNetplanEntryRequest) (*StringResponse, error)
	AddRouteToIface(context.Context, *AddRouteRequest) (*empty.Empty, error)
	AddVirtualPair(context.Context, *AddVirtualPairRequest) (*empty.Empty, error)
	AddVlanDevice(context.Context, *VlanDeviceRequest) (*empty.Empty, error)
	ChangeIpv4Address(context.Context, *ChangeIpAddressRequest) (*empty.Empty, error)
	ChangeIpv6Address(context.Context, *ChangeIpAddressRequest) (*empty.Empty, error)
	DelDevice(context.Context, *DeviceRequest) (*empty.Empty, error)
	DelIpv4Address(context.Context, *AddressRequest) (*empty.Empty, error)
	DelIpv6Address(context.Context, *AddressRequest) (*empty.Empty, error)
	DelL2MulticastAddress(context.Context, *AddressRequest) (*empty.Empty, error)
	DelNetplanEntry(context.Context, *DelNetplanRequest) (*empty.Empty, error)
	DelVirtualPair(context.Context, *DeviceRequest) (*empty.Empty, error)
	DelVlanDevice(context.Context, *VlanDeviceRequest) (*empty.Empty, error)
	GetCounters(context.Context, *DeviceRequest) (*StringResponse, error)
	GetHardwareAddress(context.Context, *DeviceRequest) (*StringResponse, error)
	GetIpv4Address(context.Context, *DeviceRequest) (*StringListResponse, error)
	GetIpv6Address(context.Context, *DeviceRequest) (*StringListResponse, error)
	GetMTU(context.Context, *DeviceRequest) (*Int32Response, error)
	GetNetplanEntries(context.Context, *empty.Empty) (*NetplanEntriesResponse, error)
	GetStats(context.Context, *DeviceRequest) (*StringResponse, error)
	GetStatus(context.Context, *DeviceRequest) (*DeviceStatusResponse, error)
	Identify(context.Context, *IdentifyRequest) (*empty.Empty, error)
	ListHardwareAddresses(context.Context, *empty.Empty) (*StringListResponse, error)
	ListInterfaceNames(context.Context, *empty.Empty) (*StringListResponse, error)
	ListIpv4Addresses(context.Context, *empty.Empty) (*StringListResponse, error)
	ListIpv6Addresses(context.Context, *empty.Empty) (*StringListResponse, error)
	SetHardwareAddress(context.Context, *AddressRequest) (*empty.Empty, error)
	SetMTU(context.Context, *SetMTURequest) (*empty.Empty, error)
	SetPromiscuous(context.Context, *SetDeviceBoolRequest) (*empty.Empty, error)
	SetStatus(context.Context, *SetDeviceBoolRequest) (*empty.Empty, error)
}

// UnimplementedNetworkInterfaceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkInterfaceServer struct {
}

func (*UnimplementedNetworkInterfaceServer) AddDevice(ctx context.Context, req *DeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddIpv4Address(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpv4Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddIpv6Address(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIpv6Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddL2MulticastAddress(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddL2MulticastAddress not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddNetplanEntry(ctx context.Context, req *AddNetplanEntryRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetplanEntry not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddRouteToIface(ctx context.Context, req *AddRouteRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouteToIface not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddVirtualPair(ctx context.Context, req *AddVirtualPairRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVirtualPair not implemented")
}
func (*UnimplementedNetworkInterfaceServer) AddVlanDevice(ctx context.Context, req *VlanDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVlanDevice not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ChangeIpv4Address(ctx context.Context, req *ChangeIpAddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeIpv4Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ChangeIpv6Address(ctx context.Context, req *ChangeIpAddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeIpv6Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelDevice(ctx context.Context, req *DeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelDevice not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelIpv4Address(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIpv4Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelIpv6Address(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelIpv6Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelL2MulticastAddress(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelL2MulticastAddress not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelNetplanEntry(ctx context.Context, req *DelNetplanRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelNetplanEntry not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelVirtualPair(ctx context.Context, req *DeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVirtualPair not implemented")
}
func (*UnimplementedNetworkInterfaceServer) DelVlanDevice(ctx context.Context, req *VlanDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVlanDevice not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetCounters(ctx context.Context, req *DeviceRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetHardwareAddress(ctx context.Context, req *DeviceRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHardwareAddress not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetIpv4Address(ctx context.Context, req *DeviceRequest) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpv4Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetIpv6Address(ctx context.Context, req *DeviceRequest) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIpv6Address not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetMTU(ctx context.Context, req *DeviceRequest) (*Int32Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMTU not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetNetplanEntries(ctx context.Context, req *empty.Empty) (*NetplanEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetplanEntries not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetStats(ctx context.Context, req *DeviceRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (*UnimplementedNetworkInterfaceServer) GetStatus(ctx context.Context, req *DeviceRequest) (*DeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedNetworkInterfaceServer) Identify(ctx context.Context, req *IdentifyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Identify not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ListHardwareAddresses(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHardwareAddresses not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ListInterfaceNames(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInterfaceNames not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ListIpv4Addresses(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpv4Addresses not implemented")
}
func (*UnimplementedNetworkInterfaceServer) ListIpv6Addresses(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIpv6Addresses not implemented")
}
func (*UnimplementedNetworkInterfaceServer) SetHardwareAddress(ctx context.Context, req *AddressRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHardwareAddress not implemented")
}
func (*UnimplementedNetworkInterfaceServer) SetMTU(ctx context.Context, req *SetMTURequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMTU not implemented")
}
func (*UnimplementedNetworkInterfaceServer) SetPromiscuous(ctx context.Context, req *SetDeviceBoolRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPromiscuous not implemented")
}
func (*UnimplementedNetworkInterfaceServer) SetStatus(ctx context.Context, req *SetDeviceBoolRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}

func RegisterNetworkInterfaceServer(s *grpc.Server, srv NetworkInterfaceServer) {
	s.RegisterService(&_NetworkInterface_serviceDesc, srv)
}

func _NetworkInterface_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddIpv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddIpv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddIpv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddIpv4Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddIpv6Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddIpv6Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddIpv6Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddIpv6Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddL2MulticastAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddL2MulticastAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddL2MulticastAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddL2MulticastAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddNetplanEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetplanEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddNetplanEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddNetplanEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddNetplanEntry(ctx, req.(*AddNetplanEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddRouteToIface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddRouteToIface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddRouteToIface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddRouteToIface(ctx, req.(*AddRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddVirtualPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVirtualPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddVirtualPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddVirtualPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddVirtualPair(ctx, req.(*AddVirtualPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_AddVlanDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).AddVlanDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/AddVlanDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).AddVlanDevice(ctx, req.(*VlanDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ChangeIpv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeIpAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ChangeIpv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ChangeIpv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ChangeIpv4Address(ctx, req.(*ChangeIpAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ChangeIpv6Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeIpAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ChangeIpv6Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ChangeIpv6Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ChangeIpv6Address(ctx, req.(*ChangeIpAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelDevice(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelIpv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelIpv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelIpv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelIpv4Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelIpv6Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelIpv6Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelIpv6Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelIpv6Address(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelL2MulticastAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelL2MulticastAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelL2MulticastAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelL2MulticastAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelNetplanEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelNetplanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelNetplanEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelNetplanEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelNetplanEntry(ctx, req.(*DelNetplanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelVirtualPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelVirtualPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelVirtualPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelVirtualPair(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_DelVlanDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VlanDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).DelVlanDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/DelVlanDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).DelVlanDevice(ctx, req.(*VlanDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetCounters(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetHardwareAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetHardwareAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetHardwareAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetHardwareAddress(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetIpv4Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetIpv4Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetIpv4Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetIpv4Address(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetIpv6Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetIpv6Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetIpv6Address",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetIpv6Address(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetMTU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetMTU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetMTU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetMTU(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetNetplanEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetNetplanEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetNetplanEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetNetplanEntries(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetStats(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).GetStatus(ctx, req.(*DeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_Identify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdentifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).Identify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/Identify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).Identify(ctx, req.(*IdentifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ListHardwareAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ListHardwareAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ListHardwareAddresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ListHardwareAddresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ListInterfaceNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ListInterfaceNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ListInterfaceNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ListInterfaceNames(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ListIpv4Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ListIpv4Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ListIpv4Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ListIpv4Addresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_ListIpv6Addresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).ListIpv6Addresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/ListIpv6Addresses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).ListIpv6Addresses(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_SetHardwareAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).SetHardwareAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/SetHardwareAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).SetHardwareAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_SetMTU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMTURequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).SetMTU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/SetMTU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).SetMTU(ctx, req.(*SetMTURequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_SetPromiscuous_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).SetPromiscuous(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/SetPromiscuous",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).SetPromiscuous(ctx, req.(*SetDeviceBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkInterface_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceBoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkInterfaceServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkInterface/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkInterfaceServer).SetStatus(ctx, req.(*SetDeviceBoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkInterface_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toolkitd.NetworkInterface",
	HandlerType: (*NetworkInterfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDevice",
			Handler:    _NetworkInterface_AddDevice_Handler,
		},
		{
			MethodName: "AddIpv4Address",
			Handler:    _NetworkInterface_AddIpv4Address_Handler,
		},
		{
			MethodName: "AddIpv6Address",
			Handler:    _NetworkInterface_AddIpv6Address_Handler,
		},
		{
			MethodName: "AddL2MulticastAddress",
			Handler:    _NetworkInterface_AddL2MulticastAddress_Handler,
		},
		{
			MethodName: "AddNetplanEntry",
			Handler:    _NetworkInterface_AddNetplanEntry_Handler,
		},
		{
			MethodName: "AddRouteToIface",
			Handler:    _NetworkInterface_AddRouteToIface_Handler,
		},
		{
			MethodName: "AddVirtualPair",
			Handler:    _NetworkInterface_AddVirtualPair_Handler,
		},
		{
			MethodName: "AddVlanDevice",
			Handler:    _NetworkInterface_AddVlanDevice_Handler,
		},
		{
			MethodName: "ChangeIpv4Address",
			Handler:    _NetworkInterface_ChangeIpv4Address_Handler,
		},
		{
			MethodName: "ChangeIpv6Address",
			Handler:    _NetworkInterface_ChangeIpv6Address_Handler,
		},
		{
			MethodName: "DelDevice",
			Handler:    _NetworkInterface_DelDevice_Handler,
		},
		{
			MethodName: "DelIpv4Address",
			Handler:    _NetworkInterface_DelIpv4Address_Handler,
		},
		{
			MethodName: "DelIpv6Address",
			Handler:    _NetworkInterface_DelIpv6Address_Handler,
		},
		{
			MethodName: "DelL2MulticastAddress",
			Handler:    _NetworkInterface_DelL2MulticastAddress_Handler,
		},
		{
			MethodName: "DelNetplanEntry",
			Handler:    _NetworkInterface_DelNetplanEntry_Handler,
		},
		{
			MethodName: "DelVirtualPair",
			Handler:    _NetworkInterface_DelVirtualPair_Handler,
		},
		{
			MethodName: "DelVlanDevice",
			Handler:    _NetworkInterface_DelVlanDevice_Handler,
		},
		{
			MethodName: "GetCounters",
			Handler:    _NetworkInterface_GetCounters_Handler,
		},
		{
			MethodName: "GetHardwareAddress",
			Handler:    _NetworkInterface_GetHardwareAddress_Handler,
		},
		{
			MethodName: "GetIpv4Address",
			Handler:    _NetworkInterface_GetIpv4Address_Handler,
		},
		{
			MethodName: "GetIpv6Address",
			Handler:    _NetworkInterface_GetIpv6Address_Handler,
		},
		{
			MethodName: "GetMTU",
			Handler:    _NetworkInterface_GetMTU_Handler,
		},
		{
			MethodName: "GetNetplanEntries",
			Handler:    _NetworkInterface_GetNetplanEntries_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _NetworkInterface_GetStats_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _NetworkInterface_GetStatus_Handler,
		},
		{
			MethodName: "Identify",
			Handler:    _NetworkInterface_Identify_Handler,
		},
		{
			MethodName: "ListHardwareAddresses",
			Handler:    _NetworkInterface_ListHardwareAddresses_Handler,
		},
		{
			MethodName: "ListInterfaceNames",
			Handler:    _NetworkInterface_ListInterfaceNames_Handler,
		},
		{
			MethodName: "ListIpv4Addresses",
			Handler:    _NetworkInterface_ListIpv4Addresses_Handler,
		},
		{
			MethodName: "ListIpv6Addresses",
			Handler:    _NetworkInterface_ListIpv6Addresses_Handler,
		},
		{
			MethodName: "SetHardwareAddress",
			Handler:    _NetworkInterface_SetHardwareAddress_Handler,
		},
		{
			MethodName: "SetMTU",
			Handler:    _NetworkInterface_SetMTU_Handler,
		},
		{
			MethodName: "SetPromiscuous",
			Handler:    _NetworkInterface_SetPromiscuous_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _NetworkInterface_SetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toolkit.proto",
}

// NetworkBridgingClient is the client API for NetworkBridging service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkBridgingClient interface {
	CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ListBridges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error)
	GetBridgeInterfaces(ctx context.Context, in *GetBridgeInterfacesRequest, opts ...grpc.CallOption) (*StringListResponse, error)
}

type networkBridgingClient struct {
	cc *grpc.ClientConn
}

func NewNetworkBridgingClient(cc *grpc.ClientConn) NetworkBridgingClient {
	return &networkBridgingClient{cc}
}

func (c *networkBridgingClient) CreateBridge(ctx context.Context, in *CreateBridgeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkBridging/CreateBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBridgingClient) RemoveBridge(ctx context.Context, in *RemoveBridgeRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkBridging/RemoveBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBridgingClient) ListBridges(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkBridging/ListBridges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkBridgingClient) GetBridgeInterfaces(ctx context.Context, in *GetBridgeInterfacesRequest, opts ...grpc.CallOption) (*StringListResponse, error) {
	out := new(StringListResponse)
	err := c.cc.Invoke(ctx, "/toolkitd.NetworkBridging/GetBridgeInterfaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkBridgingServer is the server API for NetworkBridging service.
type NetworkBridgingServer interface {
	CreateBridge(context.Context, *CreateBridgeRequest) (*empty.Empty, error)
	RemoveBridge(context.Context, *RemoveBridgeRequest) (*empty.Empty, error)
	ListBridges(context.Context, *empty.Empty) (*StringListResponse, error)
	GetBridgeInterfaces(context.Context, *GetBridgeInterfacesRequest) (*StringListResponse, error)
}

// UnimplementedNetworkBridgingServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkBridgingServer struct {
}

func (*UnimplementedNetworkBridgingServer) CreateBridge(ctx context.Context, req *CreateBridgeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBridge not implemented")
}
func (*UnimplementedNetworkBridgingServer) RemoveBridge(ctx context.Context, req *RemoveBridgeRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBridge not implemented")
}
func (*UnimplementedNetworkBridgingServer) ListBridges(ctx context.Context, req *empty.Empty) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBridges not implemented")
}
func (*UnimplementedNetworkBridgingServer) GetBridgeInterfaces(ctx context.Context, req *GetBridgeInterfacesRequest) (*StringListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBridgeInterfaces not implemented")
}

func RegisterNetworkBridgingServer(s *grpc.Server, srv NetworkBridgingServer) {
	s.RegisterService(&_NetworkBridging_serviceDesc, srv)
}

func _NetworkBridging_CreateBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBridgingServer).CreateBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkBridging/CreateBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBridgingServer).CreateBridge(ctx, req.(*CreateBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBridging_RemoveBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBridgingServer).RemoveBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkBridging/RemoveBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBridgingServer).RemoveBridge(ctx, req.(*RemoveBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBridging_ListBridges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBridgingServer).ListBridges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkBridging/ListBridges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBridgingServer).ListBridges(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkBridging_GetBridgeInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBridgeInterfacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkBridgingServer).GetBridgeInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toolkitd.NetworkBridging/GetBridgeInterfaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkBridgingServer).GetBridgeInterfaces(ctx, req.(*GetBridgeInterfacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkBridging_serviceDesc = grpc.ServiceDesc{
	ServiceName: "toolkitd.NetworkBridging",
	HandlerType: (*NetworkBridgingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBridge",
			Handler:    _NetworkBridging_CreateBridge_Handler,
		},
		{
			MethodName: "RemoveBridge",
			Handler:    _NetworkBridging_RemoveBridge_Handler,
		},
		{
			MethodName: "ListBridges",
			Handler:    _NetworkBridging_ListBridges_Handler,
		},
		{
			MethodName: "GetBridgeInterfaces",
			Handler:    _NetworkBridging_GetBridgeInterfaces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "toolkit.proto",
}
